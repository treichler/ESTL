//----------------------------------------------------------------------------//
//  Copyright 2021 Clemens Treichler                                          //
//                                                                            //
//  Copying and distribution of this file, with or without modification,      //
//  are permitted in any medium without royalty, provided the copyright       //
//  notice and this notice are preserved. This file is offered as-is,         //
//  without any warranty.                                                     //
//----------------------------------------------------------------------------//

/**
 * @file Debug_AppAccess.c
 * @brief Application specific debug access
 *
 * This file holds the references to variables which might be of interest for
 * debugging and development.
 * The variables' addresses are collected in a table and so it is possible to
 * resolve static variables' and structures' addresses without a map-file.
 * This file also implements a white-list to grand access to dedicated address
 * ranges for non-developer users.
 */

#include "ESTL_Types.h"
#include "Debug_Access.h"


/**
 * Address range type definition for address white list.
 */
typedef const struct {
  const uint32_t begin;         //!<  Start address of allowed address range.
  const uint32_t end;           //!<  Final address of allowed address range.
} debug_address_range_t;


// put here includes...
//#include "Target.h"
//#include "Application.h"

// ... or tell the compiler that your variables of interest are external.
extern uint32_t Target_data, crc32_build;


//-------------------------------------------------------------------------------------------------
//  Debug Address Lookup Table
//-------------------------------------------------------------------------------------------------

/**
 * Lookup table to store addresses of dedicated data.
 * Put here the addresses of variables that should be accessible by debug module.
 */
const uint32_t Debug_address_table[] = {
  (uint32_t)(&Target_data),
  (uint32_t)(&crc32_build),
};


//-------------------------------------------------------------------------------------------------
//  Debug Address white list
//-------------------------------------------------------------------------------------------------

/**
 * White list containing allowed address ranges.
 * Put here address ranges which should be accessible for non-developer users
 */
static debug_address_range_t Debug_address_white_list[] = {
    {0x20000000, 0x2000FFFF}, // RAM
    {0x40000000, 0x4000FFFF}, // Periphery
};


//-------------------------------------------------------------------------------------------------
//  Access functions
//-------------------------------------------------------------------------------------------------

int32_t DebugAccess_LookupTableGetAddress(int32_t index)
{
  if ( index >= sizeof(Debug_address_table) )
    return 0;
  else
    return Debug_address_table[index];
}


#define NR_OF_WHITE_LIST_ENTRIES        (sizeof(Debug_address_white_list) / sizeof(debug_address_range_t))

bool_t DebugAccess_AddressIsWhiteListed( int32_t address )
{
  uint16_t i;
  for( i = 0; i < NR_OF_WHITE_LIST_ENTRIES; i ++ )
  {
    debug_address_range_t *address_range = &Debug_address_white_list[i];
    if( (address_range->begin <= address) && (address <= address_range->end) )
      return TRUE;
  }
  return FALSE;
}
